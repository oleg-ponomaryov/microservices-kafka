package com.ponomaryov.recipients;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;

import java.lang.reflect.Field;
import java.util.Date;
import java.util.HashMap;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cloud.stream.annotation.Bindings;
import org.springframework.cloud.stream.binding.ChannelBindingService;
import org.springframework.cloud.stream.binding.InputBindingLifecycle;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.ChannelInterceptor;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.jdmpro.recipients.bindings.Consumer;
import com.jdmpro.recipients.domain.Recipient;
import com.jdmpro.recipients.repository.RecipientRepository;
import com.jdmpro.recipients.services.RecipientService;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest
public class RecipientReposotoryTest {

	public static final Message<?> TEST_MESSAGE = MessageBuilder.withPayload(
			"recipient").build();

	@Autowired
	ChannelInterceptor channelInterceptor;

	@Autowired
	RecipientRepository recipientRepository;

	@Autowired
	RecipientService recipientService;

	@Autowired
	@Bindings(Consumer.class)
	public Sink recipientSink;

	@Autowired
    private ConfigurableApplicationContext applicationContext ;
	
	@After
	public void tearDown() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
		recipientRepository.deleteAll();
		InputBindingLifecycle  ch = (InputBindingLifecycle) applicationContext.getBean("inputBindingLifecycle");
		Class <?> cl = ch.getClass();
		Field field = cl.getDeclaredField("running");
        field.setAccessible(true);
        field.setBoolean(ch, false);
		return;
	}
	
	@Test
	public void testRepository() {
		assertNotNull(recipientRepository);
		assertNotNull(recipientService);

		Recipient r0 = new Recipient();
		r0.setName("ROLEG");
		r0.setEmail("olponom@oleg.com");
		r0.setDob(new Date());
		r0.setFirstName("Oleg");
		r0.setLastName("Ponomaryov");
		r0.setGroupId("1");
		recipientService.save(r0);
		
		Recipient r1 = new Recipient();
		r1.setName("RJOHN");
		r1.setEmail("john@john.com");
		r1.setDob(new Date());
		r1.setFirstName("John");
		r1.setLastName("Dow");
		r1.setGroupId("1");
		recipientService.save(r1);

		Recipient r2 = new Recipient();
		r2.setName("RDAVID");
		r2.setEmail("david@david.com");
		r2.setDob(new Date());
		r2.setFirstName("David");
		r2.setLastName("Bowie");
		r2.setGroupId("1");
		recipientService.save(r2);
		
		assertEquals(recipientService.getAllRecipients().size(),3);
		
		recipientService.delete(r0.getId());

		assertEquals(recipientService.getAllRecipients().size(),2);
	}

	@Test
	public void testBoundChannelsIntercepted() {
		recipientSink.input().send(TEST_MESSAGE);
		verify(channelInterceptor).preSend(TEST_MESSAGE, recipientSink.input());
		verifyNoMoreInteractions(channelInterceptor);
	}
}
